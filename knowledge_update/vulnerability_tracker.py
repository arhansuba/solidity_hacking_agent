# vulnerability_tracker.py

import pandas as pd
import json
import os
from typing import List, Dict

class VulnerabilityTracker:
    def __init__(self, trends_file: str, vulnerabilities_file: str, output_file: str):
        self.trends_file = trends_file
        self.vulnerabilities_file = vulnerabilities_file
        self.output_file = output_file

    def load_trends(self) -> Dict[str, float]:
        with open(self.trends_file, 'r') as f:
            trends = json.load(f)
        return trends

    def load_vulnerabilities(self) -> pd.DataFrame:
        return pd.read_json(self.vulnerabilities_file, orient='records', lines=True)

    def update_vulnerabilities(self, vulnerabilities_df: pd.DataFrame, trends: Dict[str, float]) -> pd.DataFrame:
        # Example update logic: Add new vulnerabilities based on trends
        for trend_name, trend_data in trends.items():
            if trend_name == 'video_engagement':
                vulnerabilities_df['new_vulnerabilities'] = vulnerabilities_df['video_id'].apply(
                    lambda x: trend_data.get(x, 0) > 1000  # Example condition
                )
        
        return vulnerabilities_df

    def save_updated_vulnerabilities(self, updated_df: pd.DataFrame):
        if not os.path.exists(os.path.dirname(self.output_file)):
            os.makedirs(os.path.dirname(self.output_file))
        
        updated_df.to_json(self.output_file, orient='records', lines=True)

    def run(self):
        print("Loading trends...")
        trends = self.load_trends()
        print("Loading existing vulnerabilities...")
        vulnerabilities_df = self.load_vulnerabilities()
        print("Updating vulnerabilities based on trends...")
        updated_df = self.update_vulnerabilities(vulnerabilities_df, trends)
        print("Saving updated vulnerabilities...")
        self.save_updated_vulnerabilities(updated_df)
        print("Vulnerability tracking complete.")

# Example usage
if __name__ == "__main__":
    trends_file = 'data/trends_analysis.json'
    vulnerabilities_file = 'data/vulnerabilities.json'
    output_file = 'data/updated_vulnerabilities.json'
    
    tracker = VulnerabilityTracker(trends_file, vulnerabilities_file, output_file)
    tracker.run()
